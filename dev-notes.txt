Sources:
Youtube:  https://youtu.be/w7ejDZ8SWv8
GitHub: https://github.com/bradtraversy/react-crash-2021

cont@40:21, 57:02
impt - to import PropTypes
rafce - to auto gen func code w/=> func and export file
shft+; open up emoji 

1. in shell or gitbash: 
    - npm --version   // check node version
    - npx create-react-app react-task-tracker // create the app
    - cd react-task-tracker // change to the app folder
    - code .    // open VS code in current folder
2. In VS code
    - see all the dirs and files and json packages created with the app
        react-dom in json package.json is responsible for rendering our app
        start - will run our dev server
        build - build the production app for deployment
        test - for testing
        eject - handles webpack edits and other libraries and other packages
    - open Terminal 
    - npm start     // start the app
        see the app open, if we click on the react-dev-tool in the extensions, it tells us this app is built on development build
3. public > index.html 
    - index.html is the single page of our single page react app (SPA)
    - remove all the comments, there is just a div with id root. this is what the public sees
    It is like the gaateway to our react app
    it displays our root app App.js which is located in our src folder
4. The src folder is where we put all our components for the app
    - In index.js we import react, ReactDOM, App.js and other files needed to run our app
    - it takes our html root file and insert it into an App div which is our App.js that we imported, And App.js is our root component
    - all the components we make is going to be in this root component - App.js
5. Change the title in our html file as needed; Task Tracker in this case
    see it auto reload and update
6. Open App.js, this is the root component, everything we see comes from here
    - we see imports logo, and App.css which is some basic design for our app
    - there is also a function which returns some Javascript Syntax JSX, looks like html but they are JSX and an export
    - class in react = className, for = htmlFor, ---
    - For now:
        delete everything in return() leaving it as
            <div classname='App'>
                <h1>Hello from React</h1>
            </div>
    - Save an see the update
    - React returns a single element so everything we want to return must go into this <div> otherwise it wont work
    - if we dont want to use a <div> we can also use a fragment <> (just angular brackets with nothing inside)
    - if emmit does not work or to keep our JSX neat, 
        click the Javascript at the bottom 
        > search for react 
        > select React Javascript
    - We can delete, logo, App.css, App.test.js, setuptest files, we don't need them
        also delete the imports in App.js
7. <></> fragment keeps our codes and content wrapped inside the root div
    - using <div className="App"></div> will wrap all our contents in a div App, inside the root div 
    - We need a div for styling later so let's have a div container
        <div classname='container'>
                <h1>Hello from React</h1>
        </div>

8. We can define constants and variables outside the return() and call them using {} brackets
    const name = 'Barry'
    
    return (
        <div classname='container'>
                <h1>Hello from React</h1>
                <h2>Hello {name} </h2>
        </div>
    )
9. We can do math : 
        <h2>Hello {1 + 1} </h2>
    or use a turnary
        <h2>Hello {x ? 'Yes" : 'No'} </h2>
        //(x ? 'Yes") means if X then Yes
        // (:) means else 'No'

   const x = 'false'
    
    return (
        <div classname='container'>
                <h1>Hello from React</h1>
                <h2>Hello {x ? 'Yes" : 'No'} </h2>
        </div>
    )
    Try these and see the results

10. Thing of our UI as a bunch of components, delete the const above let's create our components
In src, 
    - create a folder called components. All our components will go here
    In components, create Header.js (the convention is to start with uppercase)
    - add ES7 React/Redux?GraphQL/React-Native snippet extension if not already have it
        it helps auto fill components
        # rcc will create a class component
        # rce will create a class component and export it at the bottom
        # rafce - creates an arrow function, import React and export the function
    - In Header.js, 
        type rafce > enter > see a boiler plate of a component created
        at the top React is also imported, this used to be required in every component before but it's not required anymore so
        delete it (react imported)
    - Change the div to
        <header >
            <h1>Task Tracker</h1>
        </header>
    - Go to App.js to imported it
        import Header from './components/Header.js
    - call the Header in the return div and replace former content as
        <div className="container">
            <Header />
        </div> 
        see the browser update
11. to use a class base (current one is function based) in our react just as an example 
    - delete everything
    - imported React from 'react' at the top
    - define the class
        class App extends React.Component {
            render() {
                return <h1>Hello From Class</h1>
            }
        }
     save and see the browser update

12. Props:
    We can pass a title to our Header
    - We can pass anything we want like so: in App.js
        <Header title='Hello' />
    - To retrieve it, 
        go to the component, inthis case: Header.js 
        > add the props as a param to the component like so

            const Header = (props) => {
            }
    - Replace the static text like so:
        return (
            <header>
                <h1>{props.title}</h1>
            </header>
        )
        save and see the title update in the browser

13. default props;
    - we can set default props
    - In App.js we don't pass in anything to <Header />
        <Header />
    - we set the props as a param as in 12 above
        const Header = (props) => {
            
        }
    - add the props to <h1> or whereever
        return (
            <header>
                <h1>{props.title}</h1>
            </header>
        )
    - then below the class, define the default props
        const Header = (props) => {
            return (
            <header>
                <h1>{props.title}</h1>
            </header>
            )
        }
        // set default props as an obj
        Header.defaultProps = {
            title: 'Task Tracker',
        }

        export default App

    - Whatever we set in App.js to the <Header />, overrides the defaultProps{}
        <Header title='Greatest App'/>
14. Destructure, deconstruct
    - Instead of 
        const Header = (props) => {
            }
    - We can use {}
        const Header = ({ title }) => {
            }
    - And instead of props.title, 
        <h1>{props.title}</h1>
    - we use just title
        <h1>{ title }</h1>

15. We also have props types
    - we can do impt to imported propTypes at the top of Header.js which auto imports
            import PropTypes from 'prop-types'
    - Then go down below defaultProps to def
            Header.propTypes = {
                title: PropTypes.string  // add the type: string, boolean, ---
            }
    - with this if we were to add title={1} in App.js, it will still render but will show warning in console since one is an integer not a string.
    This is a good way to watch for error in codes
    - if the propType is required, you only need to add .required to the declaration
            Header.propTypes = {
                title: PropTypes.string.isRequired, 
            }
16. styling
        - we can use a css component 
        - or add style directly to javascript e.g.
            <h1 styling={{ color: 'red', backgroundColor: 'black'}} >{title} </h1>
        Note: to add styling directly in JSX we use double curly {{ }}
            # also, we use carmel case name - backgroundColor (not background-color)
        - Another way is to define the const, 

            const headingStyle = {
                color: 'red', 
                backgroundColor: 'black'
            }
         
         then use it as needed with a single curly { } 
            <h1 styling={ headingStyle } >{title} </h1>
    This does the same as the previous one
17. Go to index.css (we will be using the component for this project)
    copy the code @github

18. Lets add a btn with class name 'btn' under our h1 in Header.js
    also add a className to header so we can style it
        <header className='header'>
            <h1>{title}</h1>
            <button className='btn'>Add</button>
        </header>

19. We can create a component for almost anything, 
    if we want to have more btns with diff colors and styles, we can create btns component
    - create a Button.js component in components dir
        rafce to auto fill 
    - delete the react import, it's not required anymore
    - cut the btn code from Header.js and paste in the return div of Button.js
    - import the Button to Header.js
    - then add the Button to <header> under <h1> where we had the btn code before:
        <header className='header'>
            <h1>{title}</h1>
            <Button />
        </header>
20. Adding props to Button:
    - In Header.js, let's add props color and text
        <Button color='green' text='Hello' />
    - In Button.js, let's Destructure and add some styles

        const Button = ({ color, text }) => { // destructuring
        return ( 
         <button 
            style={{ backgroundColor: color}} // add style to btn, change static color to dynamic color
            className='btn'
         >
        {text}  // change the static text to text
         </button>
    )
}
Now see the btn color change to green and the text change to Hello!

21. RESUABLE COMPONENT:
    if we want to create more btns with diff colors we just add them under the 1st one in Header.js like this:

        return ( 
        <header className='header'>
            <h1>{title}</h1>
            <Button color='green' text='Hello!' />
            <Button color='blue' text='Hello! 2' />
            <Button color='green' text='Hello! 3' />
            <Button color='green' text='Hello! 4' />
        </header>
    )

22. Set defaultProps 
    In Button.js:
    - defaultProps

        Button.defaultProps = {
            color: 'steelblue',
        }
    - impt to import the propTypes at the top
    - add the propTypes below the defaultProps
        Button.propTypes = {
            text: PropTypes.string,
            color: PropTypes.string,
        }
23. EVENTS:
    - to add onClick event to our btn, in Button.js;
     add the event to the btn by setting onClick to a func onClick
        <button 
         onClick={onClick}  // 
         style={{ backgroundColor: color }}
         className='btn'>{text}
        </button>

    - then def the func above the return() statement
        const onClick = () => {
            console.log('click')
        }
    - We can also add the event object
        const onClick = (e) => {
            console.log(e)
        }
    With this we can get the pos of the element that is clicked, and lot of other things. See in devtool
    - Since this is a component, it's not always going to have the ssame click
    so we need to have that click as a prop
    ##So in Header.js, 
        # add onClick to the <Button> and set it to {onClick} for now
            <Button 
                color='green' 
                text='Add'
                onClick={onClick} 
                />
        # and def the func above the return() statement
            const onClick = () => {
                console.log('Click')
            }
        # then catch this prop in Button.js as we did the other props
            const Button = ( { color, text, onClick }) => {
                //....
            }
        # and delete/remove the old func
            //const onClick = (e) => {
            //    console.log(e)
            //}
        # then add it to the propTypes
            Button.propTypes = {
            text: PropTypes.string,
            color: PropTypes.string,
            onClick: PropTypes.func.isRequired (may do without the isRequired)
            }
There are many kind of diff events that we can add, onSubmit, onDoubleClick ---
24. STATE 👍
    -  create a new component, Tasks.js
    - rafce to auto build code
    - remove the react import
    - create a func 'tasks' above the component func and set it to an array []
        const tasks = [ ]
        # paste in 3 diff tasks
            const tasks = [
                {
                    id: 1,
                    text: 'Doctor Appointment',
                    day: 'Feb 5th at 2:30pm',
                    reminder: 'true',
                },
                {
                    id: 2,
                    text: 'Meeting at School',
                    day: 'Feb 6th at 3:30pm',
                    reminder: 'true',
                },
                {
                    id: 3,
                    text: 'Shopping for Food',
                    day: 'Feb 7th at 5:30pm',
                    reminder: 'false',
                }
            ]
25. Loop thru the tasks
    - we dont need a div so change the div in return() to fragment
        <> </>
    - map thru the list
        <> 
            {tasks.map((task) => (<h3>{task.text}</h3>)
            )}
        </> 
        ie : for each task in tasks, take the h3 text
26. Go to App.js to 
    - import the Tasks.js 
        import Tasks from "./components/Tasks";
    - add the Task to the container just below <Header />
        <Tasks />
    Save and see that the h3 are displayed.
    But there is a warning in console that each child in a list should have a unique id
27. 👍:Fix UNIQUE ID warning
    - Add a key to the h3 tag so:
        <h3 key={task.id}> {task.text} </h3>
    Save and refresh, see that the warning disappeared
28. We don't need the array to be separate from our component,
    we want it to be part of our state so 
    - cut the array itself and 
    - delete the const tasks = part
    - to use state inside of a func we use a hook called useState
        import { useState } from 'react'
    - above the return(), def a new func tasks, and setTask (a func to update the state)
        const [tasks, setTasks] = useState(
            // paste the default array here
            [
                {
                    id: 1,
                    text: 'Doctor Appointment',
                    day: 'Feb 5th at 2:30pm',
                    reminder: 'true',
                },
                {
                    id: 2,
                    text: 'Meeting at School',
                    day: 'Feb 6th at 3:30pm',
                    reminder: 'true',
                },
                {
                    id: 3,
                    text: 'Shopping for Food',
                    day: 'Feb 7th at 5:30pm',
                    reminder: 'false',
                }
            ]
        );
    save and see that we have the same result, our state is now part of our component instead of coming from outside our component

29. to change any part of the state, we will use setTasks
    We cannot change state directly, we have to recreate and send it down so
        tasks.push() in return() will not work
    we will do
        setTasks([ .... tasks, change it to Whatever ])

30. we don't really want our task in the tasks component because we are going to need to access it from other components.
    We can use the context API or Redux where we have a store that hovers over our UI where we can pull diff pieces fo state from. For this app, we are gonna put it in our App.js as a global state then we can pass it down to the components we want
    - cut the useState import from Tasks.js
    - paste it in App.js very top
    - Also cut the whole declaration for [tasks, setTasks] in Tasks.js
    - paste that in App.js as 1st child, above the return.
        this is now a part of our component at an app level state

    - now we can pass our tasks as a prop to <Tasks>
        <Tasks tasks={tasks} />
    - Go back to Tasks.js, destructure 
        const Tasks = ({ tasks }) => {
        //---
        }
    Now tasks is a part of our app components at the app level and can be access from other components. If we left it in Tasks.js, it will only be used by the component that we embed it in
31. Instead of rendering just h3 for each task, lets have a separate task component
    - create a Task.js in components
    - rafce to populate it
    - delete the react import
    - add a class name and h3 to the div
        <div className='task'>
            <h3>My Task</h3>
        </div>
    In Tasks.js, import Task.js
        import Task from './Task'
    - Replace h3 with Task and edit the mapping to
            {tasks.map((task) => ( 
                <Task  // change h3 to task
                key = { task.id } 
                task={task}  //pass each task as a prop
                 / > 
                )) } 
    See in browser, it displays My Task

32. Display the tasks           
    - Go to Task.js, to catch the task 
    - destructure
            const Task = ({ task }) => {
                --}
    - then in the return() , edit h3 to
        <h3> { task.text} </h3>
    save, we now get our tasks displays
    - to get the day, add
        <p> { task.day } </p>

33. Add a delete btn
    We can use font awesome cdn to add icons but we will use the react icons for this app. React icon allows us to add various types of icons
    - open a new Terminal
    - npm i react-icons
    - open package.json to see the react-icons added
    - we can no use icons as components
34. Add icons
    - In Task.js, import font awesome icon from react
        import {FaTimes} from 'react-icons/fa'
    - To add the icon to h3, do this
        <h3>
            {task.text} 
            <FaTimes /> // just like we will do with any component
        </h3>
    See the x added to h3s 
    (if it doesn't work, stop  and restart the server)
    - To add style to the icon do
        <FaTimes style={{ color: 'red', cursor: 'pointer' }} />
35. To delete an item we can send a func as a prop then fire it off with a click
    In App.js, above the return(), 
        - create a func to delete task passing the id of the task to be deleted
            const deleteTask = (id) => {
                console.log('delete', id)
            }
        - then pass the func to Tasks onDelete in the return() statement
            <Tasks tasks={tasks}
                onDelete={deleteTask} //pass the func to onDelete
            />
        - In Tasks.js, pass onDelete as we passed 'tasks' (onDelete is a prop of Tasks)
                const Tasks = ({ tasks, onDelete }) => {--}
        - pass it to the <Task> in the return()
             <Task key={task.id} task={task}
                    onDelete={onDelete} / > 
    - In Task.js, do the same
        pass onDelete to the func
            const Task = ({ task, onDelete }) => {--}
        call it on a click
            <FaTimes 
                    style={{ color: 'red', cursor: 'pointer' }}
                    onClick={onDelete} /> 
    ## states get passed down / actions get passed up

    Click the delete btn, see in console ; 'delete' and also the obj details cos thats what's being passed by default.

36. To actually pass the deleted item id, 
    -  we will call a func before the onDelete task id like this:

      instead of onClick={onDelete}, we do
            onClick={() => onDelete(task.id)}
    A click calls the func which is in the App.js where we have access to the state
    Click thru and see in console, the id of the item clicked
37. TO ACTUALLY DELETE;
    - delete the console log in App.js > deleteTask()
    - replace that with/call setTasks() and filter thru the tasks that are already there
        for all tasks, check that the id is not the same as the id we want to delete (cos we are delting that)
            setTasks(tasks.filter((task) => task.id !== id))
38. To show a message when every item has been deleted
    - scroll down to the return()
    - wrap Tasks in a {}, and add an if statement
        {tasks.length > 0 ?  (   // if the length of tasks is greater than 0
      <Tasks tasks={tasks}       // get the tasks
      onDelete={deleteTask} //pass the func to onDelete
       />
       ) : ( // else
         'No Tasks To Show' // show a msg
         ) } 
Note: if we reload everything we deleted will come back, it is jus a ui we are rendering. With a backend, an Api we fetch data from, this will be taken care of

39. create a toggle reminder func in App js
        const toggleReminder = (id) => {
            console.log(id)
        }
40. Pass it down in return() > <Tasks>
        <Tasks tasks={tasks}  
            onDelete={deleteTask} //pass the func to onDelete
            onToggle={toggleReminder} // pass the toggle
       />
41. Also pass it in Tasks
        - catch the prop
            const Tasks = ({ tasks, onDelete, onToggle }) => {
            }
        - pass the prop
            Task key = { task.id }
                task = { task }
                onDelete = { onDelete }
                onToggle = { onToggle } // pass the prop
             / > 
42. Do the same in Task.js
        - catch the prop
            const Task = ({ tasks, onDelete, onToggle }) => {
            }
        - add onDoubleClick to the main div
            <div className = 'task' onDoubleClick = {() =>
             onToggle(task.id) } > // we used task.id as we r passing in task as a prop
        Now double click to see the id shown in console
43. We don't realy want to display the id, we want to toggle true to false or false to true
    - delete the console.log fROM App.js
    - we loop thru the map of tasks, if the id is sames as the id clicked,
     we spread it across the task and change the remider from whatever the current is.
        setTasks(
        tasks.map((task) => 
            task.id === id 
            ? {...task, reminder 
            : !task.reminder} 
            : task)
      )
    Now if we open devtool > React component > Tasks and select a task
    see the status of reminder true/false. If we DoubleClick it changes to the opposite. Let's show that on the page..
    - In Task.js, remember our css class reminder adds a green border to the reminder that we set to true
        # edit the return() > div > className = task
            to
            className={`task ${task.reminder ?
            'reminder' : ''}`}

44. ADD TASK COMPONENT
    - iN component > create a addTask.js
    - racfe to auto create boiler plate
    - change the div to form as this will be a form and name the class add-form
    - add a form control div into the form
    - copy the form control and paste it twice
    - change the type of the last one to  checkbox and remove the placeholder
    - add another input with type, submit and value, Save Task
45. Embed this into App.js
        import AddTasks from "./components/AddTasks";
    - ReactJust below Header in return(), add task
        <AddTask />
    - save and see the form added in the brownser
    - open up console to see that we donthave any error
46. Each input will have its own piece of state, component level state, not app level state
    - import { useState } from 'react'
    - right above return(), 
        const [text, setText] = useState('')
        const [day, setDay] = useState('')
        const [reminder, setReminder] = useState(false)
    - add the state to the inputs to receive whatever the user enters
        value={text} onChange={(e) => setText(e.target.value)}
        text:
         <input type = "text" placeholder = 'Add Task'
                    value={text} onChange={(e) => setText(e.target.value)}
                     / >

        Day & Time
        <input type = "text" placeholder = 'Add Day and Time' 
                    value={day} onChange={(e) => setDay(e.target.value)}/ >

        checkbox checked
        <input type = "checkbox"
                    value={reminder} onChange={(e) => setReminder(e.currentTarget.checked)} / >
                    for checkbox we set to currentTarget to see its checked or not
    - Now open devtool > Components > AddTask > hooks
        see the 3 states there > enter some text into the inputs and check the box and see the live update
47. To submit this, we will need a func to handle that