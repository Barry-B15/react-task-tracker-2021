Sources:
Youtube:  https://youtu.be/w7ejDZ8SWv8
GitHub: https://github.com/bradtraversy/react-crash-2021

cont@30:45
impt - to import PropTypes
rafce - to auto gen func code w/=> func and export file
shft+; open up emoji 

1. in shell or gitbash: 
    - npm --version   // check node version
    - npx create-react-app react-task-tracker // create the app
    - cd react-task-tracker // change to the app folder
    - code .    // open VS code in current folder
2. In VS code
    - see all the dirs and files and json packages created with the app
        react-dom in json package.json is responsible for rendering our app
        start - will run our dev server
        build - build the production app for deployment
        test - for testing
        eject - handles webpack edits and other libraries and other packages
    - open Terminal 
    - npm start     // start the app
        see the app open, if we click on the react-dev-tool in the extensions, it tells us this app is built on development build
3. public > index.html 
    - index.html is the single page of our single page react app (SPA)
    - remove all the comments, there is just a div with id root. this is what the public sees
    It is like the gaateway to our react app
    it displays our root app App.js which is located in our src folder
4. The src folder is where we put all our components for the app
    - In index.js we import react, ReactDOM, App.js and other files needed to run our app
    - it takes our html root file and insert it into an App div which is our App.js that we imported, And App.js is our root component
    - all the components we make is going to be in this root component - App.js
5. Change the title in our html file as needed; Task Tracker in this case
    see it auto reload and update
6. Open App.js, this is the root component, everything we see comes from here
    - we see imports logo, and App.css which is some basic design for our app
    - there is also a function which returns some Javascript Syntax JSX, looks like html but they are JSX and an export
    - class in react = className, for = htmlFor, ---
    - For now:
        delete everything in return() leaving it as
            <div classname='App'>
                <h1>Hello from React</h1>
            </div>
    - Save an see the update
    - React returns a single element so everything we want to return must go into this <div> otherwise it wont work
    - if we dont want to use a <div> we can also use a fragment <> (just angular brackets with nothing inside)
    - if emmit does not work or to keep our JSX neat, 
        click the Javascript at the bottom 
        > search for react 
        > select React Javascript
    - We can delete, logo, App.css, App.test.js, setuptest files, we don't need them
        also delete the imports in App.js
7. <></> fragment keeps our codes and content wrapped inside the root div
    - using <div className="App"></div> will wrap all our contents in a div App, inside the root div 
    - We need a div for styling later so let's have a div container
        <div classname='container'>
                <h1>Hello from React</h1>
        </div>

8. We can define constants and variables outside the return() and call them using {} brackets
    const name = 'Barry'
    
    return (
        <div classname='container'>
                <h1>Hello from React</h1>
                <h2>Hello {name} </h2>
        </div>
    )
9. We can do math : 
        <h2>Hello {1 + 1} </h2>
    or use a turnary
        <h2>Hello {x ? 'Yes" : 'No'} </h2>
        //(x ? 'Yes") means if X then Yes
        // (:) means else 'No'

   const x = 'false'
    
    return (
        <div classname='container'>
                <h1>Hello from React</h1>
                <h2>Hello {x ? 'Yes" : 'No'} </h2>
        </div>
    )
    Try these and see the results

10. Thing of our UI as a bunch of components, delete the const above let's create our components
In src, 
    - create a folder called components. All our components will go here
    In components, create Header.js (the convention is to start with uppercase)
    - add ES7 React/Redux?GraphQL/React-Native snippet extension if not already have it
        it helps auto fill components
        # rcc will create a class component
        # rce will create a class component and export it at the bottom
        # rafce - creates an arrow function, import React and export the function
    - In Header.js, 
        type rafce > enter > see a boiler plate of a component created
        at the top React is also imported, this used to be required in every component before but it's not required anymore so
        delete it (react imported)
    - Change the div to
        <header >
            <h1>Task Tracker</h1>
        </header>
    - Go to App.js to imported it
        import Header from './components/Header.js
    - call the Header in the return div and replace former content as
        <div className="container">
            <Header />
        </div> 
        see the browser update
11. to use a class base (current one is function based) in our react just as an example 
    - delete everything
    - imported React from 'react' at the top
    - define the class
        class App extends React.Component {
            render() {
                return <h1>Hello From Class</h1>
            }
        }
     save and see the browser update

12. Props:
    We can pass a title to our Header
    - We can pass anything we want like so: in App.js
        <Header title='Hello' />
    - To retrieve it, 
        go to the component, inthis case: Header.js 
        > add the props as a param to the component like so

            const Header = (props) => {
            }
    - Replace the static text like so:
        return (
            <header>
                <h1>{props.title}</h1>
            </header>
        )
        save and see the title update in the browser

13. default props;
    - we can set default props
    - In App.js we don't pass in anything to <Header />
        <Header />
    - we set the props as a param as in 12 above
        const Header = (props) => {
            
        }
    - add the props to <h1> or whereever
        return (
            <header>
                <h1>{props.title}</h1>
            </header>
        )
    - then below the class, define the default props
        const Header = (props) => {
            return (
            <header>
                <h1>{props.title}</h1>
            </header>
            )
        }
        // set default props as an obj
        Header.defaultProps = {
            title: 'Task Tracker',
        }

        export default App

    - Whatever we set in App.js to the <Header />, overrides the defaultProps{}
        <Header title='Greatest App'/>
14. Destructure, deconstruct
    - Instead of 
        const Header = (props) => {
            }
    - We can use {}
        const Header = ({ title }) => {
            }
    - And instead of props.title, 
        <h1>{props.title}</h1>
    - we use just title
        <h1>{ title }</h1>

15. We also have props types
    - we can do impt to imported propTypes at the top of Header.js which auto imports
            import PropTypes from 'prop-types'
    - Then go down below defaultProps to def
            Header.propTypes = {
                title: PropTypes.string  // add the type: string, boolean, ---
            }
    - with this if we were to add title={1} in App.js, it will still render but will show warning in console since one is an integer not a string.
    This is a good way to watch for error in codes
    - if the propType is required, you only need to add .required to the declaration
            Header.propTypes = {
                title: PropTypes.string.isRequired, 
            }
16. styling
        - we can use a css component 
        - or add style directly to javascript e.g.
            <h1 styling={{ color: 'red', backgroundColor: 'black'}} >{title} </h1>
        Note: to add styling directly in JSX we use double curly {{ }}
            # also, we use carmel case name - backgroundColor (not background-color)
        - Another way is to define the const, 

            const headingStyle = {
                color: 'red', 
                backgroundColor: 'black'
            }
         
         then use it as needed with a single curly { } 
            <h1 styling={ headingStyle } >{title} </h1>
    This does the same as the previous one
17. Go to index.css (we will be using the component for this project)
    copy the code @github

18. Lets add a btn with class name 'btn' under our h1 in Header.js
    also add a className to header so we can style it
        <header className='header'>
            <h1>{title}</h1>
            <button className='btn'>Add</button>
        </header>

19. We can create a component for almost anything, 
    if we want to have more btns with diff colors and styles, we can create btns component
    - create a Button.js component in components dir
        rafce to auto fill 
    - delete the react import, it's not required anymore
    - cut the btn code from Header.js and paste in the return div of Button.js
    - import the Button to Header.js
    - then add the Button to <header> under <h1> where we had the btn code before:
        <header className='header'>
            <h1>{title}</h1>
            <Button />
        </header>
20. Adding props to Button:
    - In Header.js, let's add props color and text
        <Button color='green' text='Hello' />
    - In Button.js, let's Destructure and add some styles

        const Button = ({ color, text }) => { // destructuring
        return ( 
         <button 
            style={{ backgroundColor: color}} // add style to btn, change static color to dynamic color
            className='btn'
         >
        {text}  // change the static text to text
         </button>
    )
}
Now see the btn color change to green and the text change to Hello!

21. RESUABLE COMPONENT:
    if we want to create more btns with diff colors we just add them under the 1st one in Header.js like this:

        return ( 
        <header className='header'>
            <h1>{title}</h1>
            <Button color='green' text='Hello!' />
            <Button color='blue' text='Hello! 2' />
            <Button color='green' text='Hello! 3' />
            <Button color='green' text='Hello! 4' />
        </header>
    )

22. Set defaultProps 
    In Button.js:
    - defaultProps

        Button.defaultProps = {
            color: 'steelblue',
        }
    - impt to import the propTypes at the top
    - add the propTypes below the defaultProps
        Button.propTypes = {
            text: PropTypes.string,
            color: PropTypes.string,
        }
23. EVENTS:
    - to add onClick event to our btn, in Button.js;
     add the event to the btn by setting onClick to a func onClick
        <button 
         onClick={onClick}  // 
         style={{ backgroundColor: color }}
         className='btn'>{text}
        </button>

    - then def the func above the return() statement
        const onClick = () => {
            console.log('click')
        }
    - We can also add the event object
        const onClick = (e) => {
            console.log(e)
        }
    With this we can get the pos of the element that is clicked, and lot of other things. See in devtool
    - Since this is a component, it's not always going to have the ssame click
    so we need to have that click as a prop
    ##So in Header.js, 
        # add onClick to the <Button> and set it to {onClick} for now
            <Button 
                color='green' 
                text='Add'
                onClick={onClick} 
                />
        # and def the func above the return() statement
            const onClick = () => {
                console.log('Click')
            }
        # then catch this prop in Button.js as we did the other props
            const Button = ( { color, text, onClick }) => {
                //....
            }
        # and delete/remove the old func
            //const onClick = (e) => {
            //    console.log(e)
            //}
        # then add it to the propTypes
            Button.propTypes = {
            text: PropTypes.string,
            color: PropTypes.string,
            onClick: PropTypes.func.isRequired (may do without the isRequired)
            }
There are many kind of diff events that we can add, onSubmit, onDoubleClick ---